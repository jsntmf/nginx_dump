---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by njcx.
--- DateTime: 2019/4/9 10:25 AM
---

local io = require("io")
local cjson = require("cjson.safe")
local string = require("string")
local config_file = require("config")
local ngx_var = ngx.var
local ngx_unescape_uri = ngx.unescape_uri


local _M = {
}


function _M.table_to_json(_obj)
    local json_text = cjson.encode(_obj) or '{}'
    return json_text
end


function _M.json_to_table(_obj)
    local table = cjson.decode(_obj) or {}
    return table
end



function _M.get_user_agent()
    local ua = ngx_var.http_user_agent
    return ua
end


function _M.get_cookie()
    local cookie = ngx_unescape_uri(ngx_var.http_cookie)
    return cookie
end

-- （nginx定义server_name）
function _M.get_server_name()
    local host = ngx_var.server_name
    return host
end


-- （带端口）
function _M.get_http_host()
    local host = ngx_var.http_host
    return host
end

-- （不带端口）
function _M.get_host()
    local host = ngx_var.host
    return host
end

-- （waf主机名）
function _M.get_hostname()
    local host = ngx_var.hostname
    return host
end

-- （地址加参数）
function _M.req_url()
    local request_uri = ngx_unescape_uri(ngx_var.request_uri)
    return request_uri
end

-- （不包含？和后面的参数）
function _M.uri()
    local uri = ngx_unescape_uri(ngx_var.uri)
    return uri
end

--（完整的地址，包含host，包含端口，有参数）

function _M.http_req_url()
    local request_uri = _M.req_url()
    return _M.get_http_host() .. request_uri
end

--（完整的地址，包含host，包含端口，无参数）

function _M.http_req_uri()
    local uri =_M.uri()
    return _M.get_http_host() .. uri
end


function _M.get_method()
    local method = ngx_var.request_method
    return method
end


function _M.req_get_data()
    local args = ngx.req.get_uri_args()
    local args_data = _M.get_table_to_str(args)
    return args_data
end


function _M.req_get_data_json()
    local args = ngx.req.get_uri_args()
    local json = _M.table_to_json(args)
    return json
end


function _M.req_post_data()
    ngx.req.read_body()
    local body_str = ngx.req.get_body_data()
    local value, err = cjson.decode(body_str)
    if not value then
        local value = ngx.req.get_post_args()
        if not value then
            return ''
        end
        return _M.get_table_to_str(value)
    end
    return _M.get_table_to_str(value)
end


function _M.req_post_data_json()
    ngx.req.read_body()
    local body_str = ngx.req.get_body_data()
    local value, err = cjson.decode(body_str)
    if not value then
        local value = ngx.req.get_post_args()
        if not value then
            return  '{}'
        end
        return cjson.encode(value)
    end
    return body_str
end


function _M.get_headers()
    local  header = ngx.req.get_headers()
    return header
end


function _M.get_req_header_json()
    local header = _M.get_headers()
    return _M.table_to_json(header)
end


function _M.split_str_table(str,reps)
    local sub_str_tab = {}
    while (true) do
        local pos = string.find(str, reps);
        if (not pos) then
            sub_str_tab[#sub_str_tab + 1] = str;
            break;
        end
        local sub_str = string.sub(str, 1, pos - 1);
        sub_str_tab[#sub_str_tab + 1] = sub_str;
        str = string.sub(str, pos + 1, #str);
    end
    return sub_str_tab
end


function _M.get_cookie_json()
    local cookie = _M.get_cookie()
    local kv = {}
    local result = {}
    if cookie then
        cookie_ = _M.split_str_table(cookie,';')
        for _, v in pairs(cookie_) do
            kv = _M.split_str_table(v,'=')
            result[kv[1]]=kv[2]
        end
        return _M.table_to_json(result)
    end
    return '{}'
end


function _M.req_referer()
    local referer = ngx_unescape_uri(ngx_var.http_referer)
    return referer
end


function _M.req_xxf()
    local header = _M.get_headers()
    local xxf = header["X_Forwarded_For"]
    return xxf
end


function _M.req_x_real_ip()
    local header = _M.get_headers()
    local x_real_ip = header["X-Real-IP"]
    return x_real_ip
end



function _M.get_localtime()
    local localtime = ngx.localtime()
    return localtime
end


function _M.get_client_ip()
    local remote_addr = ngx.var.remote_addr
    if env == 'dev' or env == 'demo' then
        return remote_addr
    end

    local first_ip = ""
    local clent_ip = _M.req_x_real_ip()
    if clent_ip == nil then
        first_ip = "unknown"
        if ip_for_both then
            return remote_addr
        end
        return first_ip
    else
        first_ip = _M.split(clent_ip, ',')[1]
        return first_ip
    end
end


function _M.get_all_args()
    local req_data = '{}'
    if _M.get_method() == "POST" then
        req_data = _M.req_post_data_json()
        return req_data
    elseif _M.get_method() == "GET" then
        req_data = _M.req_get_data_json()
        return req_data
    else
        return req_data
    end
end


function _M.waf_error_log(msg)
    local log_path = config_file.prod.error_log_path
    if env == 'dev' then
        log_path = config_file.dev.error_log_path
    end
    if env == 'demo' then
        log_path = config_file.demo.error_log_path
    end

    local log_name = string.format("%s/%s-error-waf.log", log_path, os.date("%Y-%m-%d"))
    local log_data = os.date("%Y-%m-%d %X")..' %s \n'
    local file = io.open(log_name, "a")
    if file == nil then
        return
    end
    file:write(string.format(log_data, msg))
    file:flush()
    file:close()
end


function _M.waf_info_log(msg)
    local log_path = config_file.prod.info_log_path
    if env == 'dev' then
        log_path = config_file.dev.info_log_path
    end
    if env == 'demo' then
        log_path = config_file.demo.info_log_path
    end

    local log_name = string.format("%s/waf_info_worker.log", log_path)
    local log_data = os.date("%Y-%m-%d %X")..' %s \n'
    local file = io.open(log_name, "a")
    if file == nil then
        return
    end
    file:write(string.format(log_data, msg))
    file:flush()
    file:close()
end


function _M.waf_info_log_m(msg)
    local log_path = config_file.prod.info_log_path
    if env == 'dev' then
        log_path = config_file.dev.info_log_path
    end
    if env == 'demo' then
        log_path = config_file.demo.info_log_path
    end

    local log_name = string.format("%s/waf_info_master.log", log_path)
    local log_data = os.date("%Y-%m-%d %X")..' %s \n'
    local file = io.open(log_name, "a")
    if file == nil then
        return
    end
    file:write(string.format(log_data, msg))
    file:flush()
    file:close()
end

--- waf_info_log_m
--- nginx master 进程专用


return _M